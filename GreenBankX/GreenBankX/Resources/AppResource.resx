<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMeasurement" xml:space="preserve">
    <value>Add Measurement</value>
  </data>
  <data name="AddPlot" xml:space="preserve">
    <value>Add Plot</value>
  </data>
  <data name="AddtoPlot" xml:space="preserve">
    <value>Add to Plot</value>
  </data>
  <data name="AddTree" xml:space="preserve">
    <value>Add Tree</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreatePlot" xml:space="preserve">
    <value>Create Plot</value>
  </data>
  <data name="DeletePlot" xml:space="preserve">
    <value>Delete Plot</value>
  </data>
  <data name="DeleteTree" xml:space="preserve">
    <value>Delete Tree</value>
  </data>
  <data name="Earlier" xml:space="preserve">
    <value>Earlier</value>
  </data>
  <data name="Girth" xml:space="preserve">
    <value>Girth(cm)</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Height(m)</value>
  </data>
  <data name="Later" xml:space="preserve">
    <value>Later</value>
  </data>
  <data name="ManagePlots" xml:space="preserve">
    <value>Manage lots</value>
  </data>
  <data name="MeasureTree" xml:space="preserve">
    <value>Measure tree</value>
  </data>
  <data name="Pricings" xml:space="preserve">
    <value>Pricings</value>
  </data>
  <data name="SelectaPlot" xml:space="preserve">
    <value>Select a plot</value>
  </data>
  <data name="SelectaTree" xml:space="preserve">
    <value>Select a tree</value>
  </data>
  <data name="TooSmall" xml:space="preserve">
    <value>Too small</value>
  </data>
  <data name="TotalLogs" xml:space="preserve">
    <value>Total logs</value>
  </data>
  <data name="TotalPrice" xml:space="preserve">
    <value>Total price</value>
  </data>
  <data name="AddNewTree" xml:space="preserve">
    <value>Add a New Tree</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="MerchHeight" xml:space="preserve">
    <value>Merchantable height(m)</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="TreeID" xml:space="preserve">
    <value>Tree ID</value>
  </data>
  <data name="AddPricing" xml:space="preserve">
    <value>Add Pricing scheme</value>
  </data>
  <data name="DiaInvalid" xml:space="preserve">
    <value>Diameter is invalid</value>
  </data>
  <data name="LogLength" xml:space="preserve">
    <value>Log length(m)</value>
  </data>
  <data name="minimumdiameter" xml:space="preserve">
    <value>minimum diameter (cm)</value>
  </data>
  <data name="NameInUse" xml:space="preserve">
    <value>Name is already in use</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceInvalid" xml:space="preserve">
    <value>Price is invalid</value>
  </data>
  <data name="SelectPricing" xml:space="preserve">
    <value>Select a pricing scheme</value>
  </data>
  <data name="SizeExists" xml:space="preserve">
    <value>Size already exists</value>
  </data>
  <data name="ShowGraph" xml:space="preserve">
    <value>Show a graph</value>
  </data>
  <data name="LogClass" xml:space="preserve">
    <value>Log class</value>
  </data>
  <data name="DateExists" xml:space="preserve">
    <value>Date exists</value>
  </data>
  <data name="DateExistsB" xml:space="preserve">
    <value>Measurement exists for this date</value>
  </data>
  <data name="IsInvalid" xml:space="preserve">
    <value> is invalid</value>
  </data>
  <data name="NewPlot" xml:space="preserve">
    <value>Add New Plot</value>
  </data>
  <data name="NewPrice" xml:space="preserve">
    <value>Add new pricing scheme</value>
  </data>
  <data name="OrLarger" xml:space="preserve">
    <value> or larger</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="EnterName" xml:space="preserve">
    <value>Please enter name</value>
  </data>
  <data name="EnterVDate" xml:space="preserve">
    <value>Please enter valid date</value>
  </data>
  <data name="MeanD" xml:space="preserve">
    <value>Mean diameter:</value>
  </data>
  <data name="MeanG" xml:space="preserve">
    <value>Mean growth over time</value>
  </data>
  <data name="MeanP" xml:space="preserve">
    <value>Mean price:</value>
  </data>
  <data name="MeanV" xml:space="preserve">
    <value>Mean voume:</value>
  </data>
  <data name="PinHere" xml:space="preserve">
    <value>Pin Here</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="TotalVol" xml:space="preserve">
    <value>Total volume</value>
  </data>
  <data name="NumberTrees" xml:space="preserve">
    <value>Number of trees</value>
  </data>
  <data name="YPlant" xml:space="preserve">
    <value>Year planted</value>
  </data>
  <data name="Apin" xml:space="preserve">
    <value>Area not near pin</value>
  </data>
  <data name="DelConf" xml:space="preserve">
    <value>Are You Sure you want to delete?</value>
  </data>
  <data name="DelPrice" xml:space="preserve">
    <value>Delete Pricing Scheme</value>
  </data>
  <data name="DFute" xml:space="preserve">
    <value>Date is in future</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="EMes" xml:space="preserve">
    <value>Edit measurement</value>
  </data>
  <data name="SetArea" xml:space="preserve">
    <value>Set area</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign Out</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="ChangePricing" xml:space="preserve">
    <value>Change Pricing</value>
  </data>
</root>